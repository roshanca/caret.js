/*global define*/
!(function (name, definition) {
  // Check define
  var hasDefine = typeof define === 'function',
    // Check exports
    hasExports = typeof module !== 'undefined' && module.exports;

  if (hasDefine) {
    // AMD Module or CMD Module
    define(definition);
  } else if (hasExports) {
    // Node.js Module
    module.exports = definition(require('Caret'));
  } else {
    // Assign to common namespaces or simply the global object (window)
    this[name] = definition();
  }
})('Caret', function () {
// Generated by CoffeeScript 1.8.0
var Caret;

Caret = (function() {
  function Caret(inputor) {
    this.inputor = inputor;
  }

  Caret.prototype.getPos = function() {
    var ret;
    this.inputor.focus();
    if (document.selection) {
      return this.getIEPos();
    } else {
      ret = {};
      ret.start = this.inputor.selectionStart;
      ret.end = this.inputor.selectionEnd;
      ret.text = this.inputor.value.substring(ret.start, ret.end);
      return ret;
    }
  };

  Caret.prototype.getIEPos = function() {
    var dupRange, i, inputTextRange, inputor, range, ret, textRange;
    ret = {};
    inputor = this.inputor;
    range = document.selection.createRange();
    if (inputor.tagName.toLowerCase() === 'input') {
      inputTextRange = inputor.createTextRange();
      inputTextRange.collapse(true);
      inputTextRange.select();
      dupRange = document.selection.createRange();
      dupRange.setEndPoint('EndToEnd', range);
      ret.start = dupRange.text.length - range.text.length;
      ret.end = dupRange.text.length;
      ret.text = range.text;
      range.select();
    } else if (inputor.tagName.toLowerCase() === 'textarea') {
      textRange = document.body.createTextRange();
      textRange.moveToElementText(inputor);
      ret.text = range.text;
      i = 0;
      while (textRange.compareEndPoints("StartToStart", range) < 0 && range.moveStart("character", -1) !== 0) {
        if (inputor.value.charAt(i) === "\r") {
          i++;
        }
        i++;
      }
      ret.start = i;
      ret.end = ret.text.length + i;
    }
    return ret;
  };

  Caret.prototype.setPos = function(pos) {
    var inputTextRange, inputor;
    inputor = this.inputor;
    inputor.focus();
    if (inputor.createTextRange) {
      inputTextRange = inputor.createTextRange();
      inputTextRange.collapse(true);
      inputTextRange.moveStart('character', pos.start);
      inputTextRange.moveEnd('character', pos.end - pos.start);
      inputTextRange.select();
    } else {
      inputor.setSelectionRange(pos.start, pos.end);
    }
    return inputor;
  };

  Caret.prototype.insert = function(pos, text) {
    var inputor, nEnd, nStart, nValue, oValue, range;
    inputor = this.inputor;
    inputor.focus();
    this.setPos(pos);
    if (document.selection) {
      range = document.selection.createRange();
      range.text = text;
      range.setEndPoint('StartToEnd', range);
      range.select();
    } else {
      oValue = inputor.value;
      nValue = oValue.substring(0, pos.start) + text + oValue.substring(pos.end);
      nStart = nEnd = parseInt(pos.start, 10) + text.length;
      inputor.value = nValue;
      inputor.setSelectionRange(nStart, nEnd);
    }
    return inputor;
  };

  return Caret;

})();
  return Caret;

});
